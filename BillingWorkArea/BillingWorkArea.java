/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BillingWorkArea;

import Project.EcoSystem;
import Project.Venture.Venture;
import Project.Equipment.EquipmentService;
import Project.MedicalEmployment.AmbulanceService;
import Project.MedicalEmployment.DoctorService;
import Project.Network.NetworkService;
import Project.Organization.AmbulanceOrganizationService;
import Project.Organization.BillingOrganizationService;
import Project.Organization.DoctorOrganizationService;
import Project.Organization.OrganizationService;
import Project.UserAccount.UserAccountService;
import Project.WorkQueue.AmbulanceWorkRequestService;
import Project.WorkQueue.BillingWorkRequestService;
import Project.WorkQueue.DoctorWorkRequestService;
import Project.WorkQueue.EmergencyPatientRequestService;
import Project.WorkQueue.WorkRequestService;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Deepak Khamkar
 */
public class BillingWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form BillingWorkArea
     */
      JPanel userProcessContainer;
    Venture enterprise;
    EcoSystem ecosystem;
    NetworkService network;
    UserAccountService userAccount;
    OrganizationService organization;
    public BillingWorkArea(JPanel userProcessContainer, NetworkService network,Venture enterprise,OrganizationService organization
            ,UserAccountService userAccount, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.enterprise = enterprise;
        this.network = network;
        this.userAccount =userAccount;
        this.organization = organization;
        populateRequestTable();
    }

    
    public void populateRequestTable()
    {
        DefaultTableModel model = (DefaultTableModel) WorkReqTable1.getModel();

        model.setRowCount(0);
         OrganizationService Billingorg = null;
       for(NetworkService network : ecosystem.getNetworkList())
       {
            for(Venture enterprise : network.getVentureDirectory().getVentureList())  
            {
              for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                  if(organization instanceof BillingOrganizationService)
                  {
                         Billingorg =  organization;
                         BillingOrganizationService billorg = (BillingOrganizationService)organization;
                         lblfund.setText(String.valueOf(billorg.getFunds()));
                         break;
                     }
                 }
            }
       }
       
       for(WorkRequestService wr : Billingorg.getWorkkQueue().getWorkRequestList())
       {
           if(wr instanceof BillingWorkRequestService )
           {
               BillingWorkRequestService billWrkReq = (BillingWorkRequestService)wr;
                Object[] row = new Object[11];
                
                row[0] = billWrkReq;
                row[1] = billWrkReq.getSendr().getEmployeee().getName();
                row[2] = billWrkReq.getEquiId();
                row[3] = billWrkReq.getEquiName();
                row[4] = billWrkReq.getEqui().getAvailableeQuant() ;
                row[5] = billWrkReq.getEqui().getPrice();
                row[6] = billWrkReq.getEquiPrice();
                row[7] = billWrkReq.getFundsAllocated();
              
                row[8] = billWrkReq.getStat();
                row[9] = billWrkReq.getReqDate();
                row[10] = billWrkReq.getResolvDate();
                model.addRow(row);
           }
           
       }
           //BillingWorkRequest
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jkPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        WorkReqTable1 = new javax.swing.JTable();
        btnAck = new javax.swing.JButton();
        btnRej = new javax.swing.JButton();
        btnAcc = new javax.swing.JButton();
        btnCompleteReq = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblfund = new javax.swing.JLabel();
        jkLabel1 = new javax.swing.JLabel();

        jkPanel1.setBackground(new java.awt.Color(255, 255, 255));

        WorkReqTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "BillingRequestId", "Sender", "EquipmentId", "EquipmentName", "No of Units", "Equipment Price", "totalEquipmentCost", "Fund Allocated", "Status", "Request Date", "Resolve Date"
            }
        ));
        jScrollPane2.setViewportView(WorkReqTable1);

        btnAck.setText("Acknowledge");
        btnAck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAckActionPerformed(evt);
            }
        });

        btnRej.setText("Reject Request");
        btnRej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejActionPerformed(evt);
            }
        });

        btnAcc.setText("Accept");
        btnAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccActionPerformed(evt);
            }
        });

        btnCompleteReq.setText("Complete Request");
        btnCompleteReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteReqActionPerformed(evt);
            }
        });

        jLabel2.setText("Funds Available :");

        lblfund.setText("<fund>");

        jkLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jkLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jkLabel1.setText("BILLING COUNTER");

        javax.swing.GroupLayout jkPanel1Layout = new javax.swing.GroupLayout(jkPanel1);
        jkPanel1.setLayout(jkPanel1Layout);
        jkPanel1Layout.setHorizontalGroup(
            jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jkPanel1Layout.createSequentialGroup()
                .addGroup(jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jkPanel1Layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jkLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jkPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lblfund, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(272, 272, 272))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jkPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jkPanel1Layout.createSequentialGroup()
                                .addComponent(btnAck, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(btnRej, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(btnAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(btnCompleteReq, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1045, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jkPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAcc, btnAck, btnCompleteReq, btnRej});

        jkPanel1Layout.setVerticalGroup(
            jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jkPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jkLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblfund, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jkPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAck)
                    .addComponent(btnRej)
                    .addComponent(btnAcc)
                    .addComponent(btnCompleteReq))
                .addContainerGap(245, Short.MAX_VALUE))
        );

        jkPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAcc, btnAck, btnCompleteReq, btnRej});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jkPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jkPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAckActionPerformed

        int count = WorkReqTable1.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable1.getSelectedRow();
            BillingWorkRequestService emerReq = (BillingWorkRequestService) WorkReqTable1.getValueAt(selectedRow, 0);
            
            System.out.println(emerReq.getStat());
            
            if(emerReq.getStat().equals("Rejected - Funds Not Available this time")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted funds");            
            }else if(emerReq.getStat().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Acknowledged")) {
                JOptionPane.showMessageDialog(null, "Request is already Acknowledged");
            }           
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                if(msg != null)
                {
                    emerReq.setStat("Acknowledged");
                    emerReq.setMes(msg);
                }
                populateRequestTable();
            }
            //emerReq.setStatus("Accepted");
        }
    }//GEN-LAST:event_btnAckActionPerformed

    private void btnRejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejActionPerformed

        int count = WorkReqTable1.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable1.getSelectedRow();
            BillingWorkRequestService emerReq = (BillingWorkRequestService) WorkReqTable1.getValueAt(selectedRow, 0);
            if(emerReq.getStat().equals("Rejected - Funds Not Available this time")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStat().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted and Processing");
            }else if(emerReq.getStat().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }else if(emerReq.getStat().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }             
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStat("Rejected - Funds Not Available this time");
                emerReq.setMes(msg);
                }
                populateRequestTable();
            }
        }
        
    }//GEN-LAST:event_btnRejActionPerformed

    private void btnAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccActionPerformed

        int count = WorkReqTable1.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable1.getSelectedRow();
            BillingWorkRequestService emerReq = (BillingWorkRequestService) WorkReqTable1.getValueAt(selectedRow, 0);
            
            System.out.println(emerReq.getStat());
            
            if(emerReq.getStat().equals("Rejected - Funds Not Available this time")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");            
            }else if(emerReq.getStat().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }           
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
               OrganizationService Billingorg = null;
               double funds = 0;
                 for(NetworkService network : ecosystem.getNetworkList())
       {
            for(Venture enterprise : network.getVentureDirectory().getVentureList())  
            {
              for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                  if(organization instanceof BillingOrganizationService)
                  {
                         Billingorg =  organization;
                         BillingOrganizationService billorg = (BillingOrganizationService)organization;
                         funds = billorg.getFunds() - emerReq.getTotalEquiCost() ;
                         lblfund.setText(String.valueOf(funds));
                         billorg.setFunds(funds);
                        // emerReq.setFundsAvailable(funds);
                         break;
                     }
                 }
            }
       }
                
                emerReq.setStat("Accepted");
                double allocatedfunds = emerReq.getTotalEquiCost();
                emerReq.setFundsAllocated(allocatedfunds);
                
                emerReq.setMes(msg);
                populateRequestTable();
            }
            //emerReq.setStatus("Accepted");
        }
    }//GEN-LAST:event_btnAccActionPerformed

    private void btnCompleteReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteReqActionPerformed

         int count = WorkReqTable1.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable1.getSelectedRow();
            BillingWorkRequestService emerReq = (BillingWorkRequestService) WorkReqTable1.getValueAt(selectedRow, 0);
            String childStatus = emerReq.getStat();
         
           
            if(childStatus.equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");            
            }else if(childStatus.equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(childStatus.equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(childStatus.equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                    System.out.println("Completed");
                emerReq.setFundsAllocated(emerReq.getEquiPrice());
                emerReq.setStat("Completed");
                EquipmentService equipment = emerReq.getEqui();
                int qunat = Integer.parseInt(equipment.getAvailableeQuant());
                int addQuant = emerReq.getNumberOfUnits();
                int total = qunat +addQuant;
                System.out.println("addQuant " + addQuant);
                System.out.println("qunat " + qunat);
                System.out.println("total " + total);
                 
                equipment.setAvailableeQuant(String.valueOf(total) );
                
                 BillingOrganizationService Billingorg = null;
               double funds = 0;
                 for(NetworkService network : ecosystem.getNetworkList())
       {
            for(Venture enterprise : network.getVentureDirectory().getVentureList())  
            {
              for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                  if(organization instanceof BillingOrganizationService)
                  {
                       Billingorg = (BillingOrganizationService) organization;
                        
                  }
              }
            }
       }
                double oldfund = Billingorg.getFunds();
                double newfund = oldfund - emerReq.getEquiPrice();
                System.out.print(oldfund);
                   System.out.print(newfund);
                Billingorg.setFunds(newfund);
                lblfund.setText(String.valueOf(newfund));
                emerReq.setMes(msg);
                emerReq.setResolvDate(new Date());
                }
                populateRequestTable();
            }
        }
    }//GEN-LAST:event_btnCompleteReqActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable WorkReqTable1;
    private javax.swing.JButton btnAcc;
    private javax.swing.JButton btnAck;
    private javax.swing.JButton btnCompleteReq;
    private javax.swing.JButton btnRej;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jkLabel1;
    private javax.swing.JPanel jkPanel1;
    private javax.swing.JLabel lblfund;
    // End of variables declaration//GEN-END:variables
}
