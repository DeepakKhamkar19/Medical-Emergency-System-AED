/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EmergencyUserWorkArea;

import Project.EcoSystem;
import Project.Venture.Venture;
import Project.MedicalEmployment.AmbulanceService;
import Project.MedicalEmployment.DoctorService;
import Project.Network.NetworkService;
import Project.Organization.AmbulanceOrganizationService;
import Project.Organization.DoctorOrganizationService;
import Project.Organization.EmergencyOrganizationService;
import Project.Organization.OrganizationService;
import Project.UserAccount.UserAccountService;
import Project.WorkQueue.AmbulanceWorkRequestService;
import Project.WorkQueue.DoctorWorkRequestService;
import Project.WorkQueue.EmergencyPatientRequestService;
import Project.WorkQueue.WorkRequestService;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class EmergencyPatientAdminWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form EmergencyPatientAdminWorkArea
     */
    JPanel userProcessContainer;
    Venture enterprise;
    EcoSystem system;
    OrganizationService organization;
    NetworkService network;
    UserAccountService account;
    EmergencyPatientRequestService emergencyPatientReq;
    EmergencyOrganizationService emergencyOrg; 
    public EmergencyPatientAdminWorkArea(JPanel userProcessContainer, UserAccountService account, OrganizationService organization, Venture enterprise, NetworkService network, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.system = business;
        this.organization = organization;
        this.network = network;
        this.account = account;
        
        for (WorkRequestService wr : organization.getWorkkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyPatientRequestService) {
               
                 emergencyPatientReq = (EmergencyPatientRequestService)wr;
            }
        }
        
        populateTable();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) WorkReqTable.getModel();
        model.setRowCount(0);
        for (WorkRequestService wr : organization.getWorkkQueue().getWorkRequestList()) {
            if(wr instanceof EmergencyPatientRequestService) {
                
                    EmergencyPatientRequestService epr = (EmergencyPatientRequestService)wr;
                    if(epr.getAcceptUser() == null || epr.getAcceptUser().getUserName().equals(account.getUserName()))
                    {

                    Object[] row = new Object[model.getColumnCount()];
                    row[0] = epr;
                    row[1] = epr.getPat().getPatName();//epr.getSender().getEmployee().getName();
                    row[2] = epr.getPat().getPatName();
                    row[3] = epr.getPat().getAdd();
                    row[4] = epr.getCritical();
                    row[5] = epr.getStat();// epr.getRequestdate();
                    row[6] = epr.getReqDate();
                    row[7] = epr.getPat().getPhoneNo();
                    row[8] = epr.getEmerDoctor() != null ? epr.getEmerDoctor() : "" ;
                    row[9] = epr.getAmb();
                    model.addRow(row);
                    }
            }
            
        }
    
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        WorkReqTable = new javax.swing.JTable();
        btnAck = new javax.swing.JButton();
        btnRej = new javax.swing.JButton();
        btnProc = new javax.swing.JButton();
        btnCompleteReq = new javax.swing.JButton();
        btnAssigDoctor = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblChildRequest = new javax.swing.JTable();
        jkLabel1 = new javax.swing.JLabel();
        btnAmb = new javax.swing.JButton();
        jbtnClear = new javax.swing.JButton();
        btnRefreshTbl = new javax.swing.JButton();
        jkLabel2 = new javax.swing.JLabel();

        WorkReqTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestId", "Sender", "Patient Name", "Patient Address", "Criticality", "Status", "Request Date", "Phone Number", "Doctor", "Ambulance"
            }
        ));
        WorkReqTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WorkReqTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(WorkReqTable);

        btnAck.setText("Accept Request");
        btnAck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAckActionPerformed(evt);
            }
        });

        btnRej.setText("Reject Request");
        btnRej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejActionPerformed(evt);
            }
        });

        btnProc.setText("Process Request");
        btnProc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcActionPerformed(evt);
            }
        });

        btnCompleteReq.setText("Complete Request");
        btnCompleteReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteReqActionPerformed(evt);
            }
        });

        btnAssigDoctor.setText("Assign Doctor");
        btnAssigDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigDoctorActionPerformed(evt);
            }
        });

        tblChildRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestId", "Sender", "Patient Name", "Patient Address", "Criticality", "Status", "Request Date", "Phone Number", "Doctor", "Ambulance"
            }
        ));
        jScrollPane3.setViewportView(tblChildRequest);

        jkLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jkLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jkLabel1.setText("EMERGENCY CHILD REQUEST");

        btnAmb.setText("Assigned Ambulance");
        btnAmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmbActionPerformed(evt);
            }
        });

        jbtnClear.setText("Clear");
        jbtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearActionPerformed(evt);
            }
        });

        btnRefreshTbl.setText("Refresh");
        btnRefreshTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshTblActionPerformed(evt);
            }
        });

        jkLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jkLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jkLabel2.setText("EMERGENCY PATIENT ADMIN WORK AREA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(357, 357, 357)
                                .addComponent(jkLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRefreshTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAck)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnAmb)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnAssigDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnRej)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnProc)
                                        .addGap(20, 20, 20)
                                        .addComponent(btnCompleteReq))
                                    .addComponent(jScrollPane1)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jkLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jbtnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jkLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefreshTbl)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAck)
                    .addComponent(btnRej)
                    .addComponent(btnProc)
                    .addComponent(btnCompleteReq)
                    .addComponent(btnAssigDoctor)
                    .addComponent(btnAmb))
                .addGap(59, 59, 59)
                .addComponent(jkLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jbtnClear)
                .addContainerGap(135, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAckActionPerformed
          int count = WorkReqTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            
            System.out.println(emerReq.getStat());
            
            if(emerReq.getStat().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStat().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStat().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }else if(emerReq.getStat().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }            
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStat("Accepted");
                System.out.println("Accepted uSer" +account.getUserName() );
                emerReq.setAcceptUser(account);
                emerReq.setMes(msg);
                }
                populateTable();
            }
            //emerReq.setStatus("Accepted");
        }
    }//GEN-LAST:event_btnAckActionPerformed

    private void btnRejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejActionPerformed
       int count = WorkReqTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            if(emerReq.getStat().equals("Rejected")) {
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Accepted")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted");
            }else if(emerReq.getStat().equals("Processing")) {
                JOptionPane.showMessageDialog(null, "Request is already Accepted and Processing");
            }else if(emerReq.getStat().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }else if(emerReq.getStat().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }             
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setStat("Rejected");
                emerReq.setMes(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnRejActionPerformed

    private void btnProcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcActionPerformed
        int count = WorkReqTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStat().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getAmb() == null || emerReq.getEmerDoctor() == null)
            {
                 JOptionPane.showMessageDialog(null, "Request is not yet Assigned to Doctor or Ambulance, So it can not be processed");
            }
            else {
                String msg = JOptionPane.showInputDialog("Additional Message");     
                  if(msg != null)
                {
                emerReq.setStat("Processing");
                emerReq.setMes(msg);
                }
                populateTable();
            }            
        }
    }//GEN-LAST:event_btnProcActionPerformed

    private void btnCompleteReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteReqActionPerformed
        int count = WorkReqTable.getSelectedRowCount();
        if(count != 1) {
            JOptionPane.showMessageDialog(null, "Select a request");
        }else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            String childStatus = "";
         
            OrganizationService doctorOrg = null;
         for(Venture enterprise : network.getVentureDirectory().getVentureList())
        {
            for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof DoctorOrganizationService ) {

                   doctorOrg = organization;
                   break;
               }
           }
        }
        for(DoctorService doc : system.getDoctroDirectory().getDoctorrList())
            {
               if(doc.getDoctorName().equals(emergencyPatientReq.getEmerDoctor().getDoctorName()))
               {
                   for(UserAccountService ua : doctorOrg.getUserAccounttDirectory().getUserAccounttList())
                   {
                       if(ua.getEmployeee().getName().equals(emergencyPatientReq.getEmerDoctor().getDoctorName()))
                       {
                            for (WorkRequestService wr : ua.getWorkkQueue().getWorkRequestList()) {
                                if(wr instanceof DoctorWorkRequestService) {

                                    DoctorWorkRequestService epr = (DoctorWorkRequestService)wr;
                                    childStatus = epr.getStat();
                                }
                            }
                       }
                   }
               }
            }
            
         OrganizationService ambulanceOrg = null;
         for(Venture enterprise : network.getVentureDirectory().getVentureList())
         {
            for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof AmbulanceOrganizationService ) {

                   ambulanceOrg = organization;
                   break;
               }
           }
        }
         
          for(AmbulanceService amb : system.getAmbulanceDirectory().getambulanceList())
            {
               if(amb.getAmbulanceeNumber().equals(emergencyPatientReq.getAmb().getAmbulanceeNumber()))
               {
                   for(UserAccountService ua : ambulanceOrg.getUserAccounttDirectory().getUserAccounttList())
                   {
                       if(ua.getEmployeee().getName().equals(emergencyPatientReq.getAmb().getDriverrName()))
                       {
                            for (WorkRequestService wr : ua.getWorkkQueue().getWorkRequestList()) {
                                if(wr instanceof AmbulanceWorkRequestService) {

                                    AmbulanceWorkRequestService epr = (AmbulanceWorkRequestService)wr;
                                    childStatus = epr.getStat();
                                }
                            }
                       }
                   }
                   
               }
            }
            
            
            System.out.println("Child Status" + childStatus);
//            if(childStatus.equals("Rejected")) {
//                JOptionPane.showMessageDialog(null, "Request is already Rejected");
//            }else if(childStatus.equals("Accepted")) {
//                JOptionPane.showMessageDialog(null, "Request should be in processing state before marking complete");
//            }else if(childStatus.equals("Completed")) {
//                JOptionPane.showMessageDialog(null, "Request is already Completed");
//            }else if(childStatus.equals("Cancelled")) {
//                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
//            }else if(childStatus.equals("Requested")) {
//                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
//            }else 
                if(!childStatus.equals("Completed")) {
                JOptionPane.showMessageDialog(null, "All the Request is not yet Completed");
            }else {
                String msg = JOptionPane.showInputDialog("Additional Message");
                  if(msg != null)
                {
                emerReq.setResolvDate(new Date());
                emerReq.setStat("Completed");
                emerReq.setMes(msg);
                }
                populateTable();
            }
        }
    }//GEN-LAST:event_btnCompleteReqActionPerformed

    private void btnAssigDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigDoctorActionPerformed
        // TODO add your handling code here:
        
         int count = WorkReqTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStat().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStat().equals("Assigned Doctor")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned a Doctor");
            }
            else {
                
                
               if(emergencyPatientReq.getEmerDoctor() == null)
               {
                   
                   OrganizationService doctorOrg = null;
                     for(Venture enterprise : network.getVentureDirectory().getVentureList())
                    {
                        for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                           if (organization instanceof DoctorOrganizationService ) {

                               doctorOrg = organization;
                               break;
                           }
                       }
                    }
                   
                    int size = system.getDoctroDirectory().getDoctorrList().size();
                    String[] DoctorList = new String[size+1]; ;
                    int i= 0;
                    DoctorList[i] = "Select";
                    i++;
                    int availableCount = 0;
                    for(DoctorService doctor : system.getDoctroDirectory().getDoctorrList())
                    {
                        if(doctor.getEmergencyDoctorr())
                        {
                            for(DoctorService doc : system.getDoctroDirectory().getDoctorrList())
                        {
                           if(doc.getDoctorName().equals(doctor.getDoctorName()))
                           {
                               for(UserAccountService ua : doctorOrg.getUserAccounttDirectory().getUserAccounttList())
                               {
                                   if(ua.getEmployeee().getName().equals(doctor.getDoctorName()))
                                   {
                                       for(WorkRequestService wr : ua.getWorkkQueue().getWorkRequestList())
                                       {
                                           if(wr instanceof  DoctorWorkRequestService)
                                           {
                                               DoctorWorkRequestService dwr = (DoctorWorkRequestService)wr;
                                               {
                                                   if(!dwr.getStat().equals("Completed"))
                                                   {
                                                       availableCount++;
                                                        DoctorList[i] = doctor.getDoctorName();
                                                        i++;
                                                       
                                                   }
                                                   else
                                                   {
                                                       // JOptionPane.showMessageDialog(null, "There is already request inprogress for this doctor");
                                                   }
                                               }
                                           }
                                       }
                                   }
                               }
                           }
                        }
                            
                            if(availableCount < 1)
                            {
                            DoctorList[i] = doctor.getDoctorName();
                            i++;
                            }
                        }
                    }
                        

                     final JComboBox<String> combo = new JComboBox<>(DoctorList);

                    String[] options = { "OK", "Cancel" };

                    String title = "Title";
                    int selection = JOptionPane.showOptionDialog(null, combo, title,
                          JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                          options, options[0]);

                    if (selection > 0) {
                       System.out.println("Doctor is: " + options[selection]);
                    }
                     

                    Object docterName = combo.getSelectedItem();
                    if(!docterName.equals("Select"))
                    {

                    for(DoctorService doc : system.getDoctroDirectory().getDoctorrList())
                        {
                           if(doc.getDoctorName().equals(docterName))
                           {
                               for(UserAccountService ua : doctorOrg.getUserAccounttDirectory().getUserAccounttList())
                               {
                                   if(ua.getEmployeee().getName().equals(docterName))
                                   {
                                       
                                       System.out.println(docterName + "Word Requet ");
                                       emergencyPatientReq.setEmerDoctor(doc);
                                       DoctorWorkRequestService doctorwrkReq = new DoctorWorkRequestService();
                                       doctorwrkReq.setPat(emergencyPatientReq.getPat());
                                       doctorwrkReq.setEmerDoctor(doc);
                                       doctorwrkReq.setReqDate(new Date());
                                       doctorwrkReq.setSenderNet(network);
                                       doctorwrkReq.setSenderOrg(organization);
                                       doctorwrkReq.setRecieverOrg(doctorOrg);
                                       doctorwrkReq.setCritical(emergencyPatientReq.getCritical());
                                       doctorwrkReq.setStat("Assigned Doctor");
                                       doctorwrkReq.setEmergencyPatRequest(emergencyPatientReq);
                                       ua.getWorkkQueue().addWorkRequest(doctorwrkReq);
                                   }
                               }
            //                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);

                           }
                        }

                    emergencyPatientReq.setStat("Assigned Doctor");
                     populateTable();
                   }
                }
               else
               {
                    JOptionPane.showMessageDialog(null, "Request is already Assigned to Doctor");
               }
            }
        }
    }//GEN-LAST:event_btnAssigDoctorActionPerformed

    private void btnAmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmbActionPerformed
        // TODO add your handling code here:
         int count = WorkReqTable.getSelectedRowCount();
        if (count != 1) {
            JOptionPane.showMessageDialog(null, "Select one row", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            int selectedRow = WorkReqTable.getSelectedRow();
            EmergencyPatientRequestService emerReq = (EmergencyPatientRequestService) WorkReqTable.getValueAt(selectedRow, 0);
            System.out.println(emerReq.getStat());
            if(emerReq.getStat().equals("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled by sender");
            }else if(emerReq.getStat().equals("Processing")){
                JOptionPane.showMessageDialog(null, "Request is already Processing");
            }else if(emerReq.getStat().equals("Rejected")){
                JOptionPane.showMessageDialog(null, "Request is already Rejected");
            }else if(emerReq.getStat().equals("Completed")){
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            }else if(emerReq.getStat().equals("Requested")) {
                JOptionPane.showMessageDialog(null, "Request is not yet Accepted");
            }else if(emerReq.getStat().equals("Assigned Ambulance")) {
                JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
            }
           else {
                
             if(emergencyPatientReq.getAmb() == null)
             {
                 

                
                int size = system.getAmbulanceDirectory().getambulanceList().size();
                String[] ambulanceList = new String[size+1]; ;
                int i= 0;
                ambulanceList[i] = "Select";
                i++;
                for(AmbulanceService ambulance : system.getAmbulanceDirectory().getambulanceList())
                {
                    ambulanceList[i] = String.valueOf(ambulance.getAmbulanceeNumber());
                    i++;
                }

                 final JComboBox<String> combo = new JComboBox<>(ambulanceList);

                String[] options = { "OK", "Cancel" };

                String title = "Title";
                int selection = JOptionPane.showOptionDialog(null, combo, title,
                      JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                      options, options[0]);

                if (selection > 0) {
                   System.out.println("Ambulance is: " + options[selection]);
                }
                if(!options[selection].equals("Cancel"))
                {
                        OrganizationService ambulanceOrg = null;
                        for(Venture enterprise : network.getVentureDirectory().getVentureList())
                       {
                           for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                              if (organization instanceof AmbulanceOrganizationService ) {

                                  ambulanceOrg = organization;
                                  break;
                              }
                          }
                       }

                       Object ambulanceName = combo.getSelectedItem();

                       for(AmbulanceService ambulance : system.getAmbulanceDirectory().getambulanceList())
                           {
                               System.out.println(ambulanceName + "Word Requet 1");
                              if(ambulance.getAmbulanceeNumber().equals(ambulanceName))
                              {
                                    System.out.println(ambulanceName + "Word Requet 2");
                                  for(UserAccountService ua : ambulanceOrg.getUserAccounttDirectory().getUserAccounttList())
                                  {
                                      if(ua.getEmployeee().getName().equals(ambulance.getDriverrName()))
                                      {
                                          System.out.println(ambulanceName + "Word Requet 3 ");
                                          //emergencyPatientReq.etEmergencyDoctor(doc);
                                          AmbulanceWorkRequestService ambulancewrkReq = new AmbulanceWorkRequestService();
                                          ambulancewrkReq.setPat(emergencyPatientReq.getPat());
                                          ambulancewrkReq.setEmerDoctor(emergencyPatientReq.getEmerDoctor());
                                          ambulancewrkReq.setReqDate(new Date());
                                          ambulancewrkReq.setSenderNet(network);
                                          ambulancewrkReq.setSenderOrg(organization);
                                          ambulancewrkReq.setRecieverOrg(ambulanceOrg);
                                          ambulancewrkReq.setCritical(emergencyPatientReq.getCritical());
                                          ambulancewrkReq.setStat("Ambulace Requested");
                                          emergencyPatientReq.setAmb(ambulance);
                                          ambulancewrkReq.setReceivr(ua);
                                          ambulancewrkReq.setAmb(ambulance);
                                          ambulancewrkReq.setEmergencyPatientReq(emergencyPatientReq);
                                          ua.getWorkkQueue().addWorkRequest(ambulancewrkReq);
                                            emergencyPatientReq.setStat("Assigned Ambulance");
                                             populateTable();
                                          return;
                                      }
                                  }
               //                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);

                              }
                           }

                                  
                        }
                }
             else
             {
                  JOptionPane.showMessageDialog(null, "Request is already Assigned for Ambulance");
             }
       }
      }
    }//GEN-LAST:event_btnAmbActionPerformed

    private void WorkReqTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WorkReqTableMouseClicked
        // TODO add your handling code here:
         int selectedReq = WorkReqTable.getSelectedRow();
        if(selectedReq >= 0){
        EmergencyPatientRequestService selectedWorkReq = (EmergencyPatientRequestService)WorkReqTable.getValueAt(selectedReq, 0);
        populateChildTable(selectedWorkReq);
        }
    }//GEN-LAST:event_WorkReqTableMouseClicked

    private void jbtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tblChildRequest.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_jbtnClearActionPerformed

    private void btnRefreshTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshTblActionPerformed
        // TODO add your handling code here:
         populateTable();
         DefaultTableModel model = (DefaultTableModel) tblChildRequest.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnRefreshTblActionPerformed

    public void populateChildTable(EmergencyPatientRequestService selectedWorkReq)
    {
        
         DefaultTableModel model = (DefaultTableModel) tblChildRequest.getModel();
        model.setRowCount(0);
        OrganizationService doctorOrg = null;
         for(Venture enterprise : network.getVentureDirectory().getVentureList())
        {
            for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof DoctorOrganizationService ) {

                   doctorOrg = organization;
                   break;
               }
           }
        }
        for(DoctorService doc : system.getDoctroDirectory().getDoctorrList())
            {
              if(selectedWorkReq.getEmerDoctor() != null)
               {
               if(doc.getDoctorName().equals(selectedWorkReq.getEmerDoctor().getDoctorName()))
               {
                   for(UserAccountService ua : doctorOrg.getUserAccounttDirectory().getUserAccounttList())
                   {
                      
                            if(ua.getEmployeee().getName().equals(selectedWorkReq.getEmerDoctor().getDoctorName()))
                            {
                                 for (WorkRequestService wr : ua.getWorkkQueue().getWorkRequestList()) {
                                     if(wr instanceof DoctorWorkRequestService) {

                                         DoctorWorkRequestService epr = (DoctorWorkRequestService)wr;
                                         System.out.println("EMergency Reque id for doc ="+epr.getEmergencyPatRequest());
                                         if(epr.getEmergencyPatRequest().equals(selectedWorkReq))
                                         {

                                            Object[] row = new Object[model.getColumnCount()];
                                            row[0] = epr;
                                            row[1] = epr.getPat().getPatName();//epr.getSender().getEmployee().getName();
                                            row[2] = epr.getPat().getPatName();
                                            row[3] = epr.getPat().getAdd();
                                            row[4] = epr.getCritical();
                                            row[5] = epr.getStat();// epr.getRequestdate();
                                            row[6] = epr.getReqDate();
                                            row[7] = epr.getPat().getPhoneNo();
                                            row[8] = epr.getEmerDoctor() != null ? epr.getEmerDoctor().getDoctorName() : "" ;
                                            //row[9] = epr.get.getAmbulance();
                                            model.addRow(row);
                                         }
                                     }

                                 }
                            }
                       
                   }
//                   account.getWorkQueue().addWorkRequest(emergencyPatientReq);
               }  
               }
            }
        
        
         OrganizationService ambulanceOrg = null;
         for(Venture enterprise : network.getVentureDirectory().getVentureList())
        {
            for (OrganizationService organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
               if (organization instanceof AmbulanceOrganizationService ) {

                   ambulanceOrg = organization;
                   break;
               }
           }
        }
         
          for(AmbulanceService amb : system.getAmbulanceDirectory().getambulanceList())
            {
                if(selectedWorkReq.getAmb() != null)
             {
               if(amb.getAmbulanceeNumber().equals(selectedWorkReq.getAmb().getAmbulanceeNumber()))
               {
                   for(UserAccountService ua : ambulanceOrg.getUserAccounttDirectory().getUserAccounttList())
                   {
                       
                            if(ua.getEmployeee().getName().equals(selectedWorkReq.getAmb().getDriverrName()))
                            {
                                 for (WorkRequestService wr : ua.getWorkkQueue().getWorkRequestList()) {
                                     if(wr instanceof AmbulanceWorkRequestService) {

                                         AmbulanceWorkRequestService epr = (AmbulanceWorkRequestService)wr;
                                         
                                         if(epr.getEmergencyPatientReq().equals(selectedWorkReq))
                                         {

                                            Object[] row = new Object[model.getColumnCount()];
                                            row[0] = epr;
                                            row[1] = epr.getPat().getPatName();//epr.getSender().getEmployee().getName();
                                            row[2] = epr.getPat().getPatName();
                                            row[3] = epr.getPat().getAdd();
                                            row[4] = epr.getCritical();
                                            row[5] = epr.getStat();// epr.getRequestdate();
                                            row[6] = epr.getReqDate();
                                            row[7] = epr.getPat().getPhoneNo();
                                            row[8] = "" ;
                                            row[9] = epr.getAmb() != null ? epr.getAmb().getAmbulanceeNumber() : "";
                                            model.addRow(row);
                                         }
                                     }

                                 }

                            }
                      
                  }
               }
             }
            }
        
    }
      
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable WorkReqTable;
    private javax.swing.JButton btnAck;
    private javax.swing.JButton btnAmb;
    private javax.swing.JButton btnAssigDoctor;
    private javax.swing.JButton btnCompleteReq;
    private javax.swing.JButton btnProc;
    private javax.swing.JButton btnRefreshTbl;
    private javax.swing.JButton btnRej;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtnClear;
    private javax.swing.JLabel jkLabel1;
    private javax.swing.JLabel jkLabel2;
    private javax.swing.JTable tblChildRequest;
    // End of variables declaration//GEN-END:variables
}
